#include "Arduino.h"
#include "uRTCLib.h"
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

// SSID e senha
const char* ssid = "teste";
const char* password = "12341234";

// define o pino do relé
const int relayPin = D3;

// duração e intervalo do pulso
const int pulseDuration = 4500;  // Duração padrão do pulso: 500ms
const int pulseInterval = 5000; // Intervalo padrão do pulso: 1000ms (1 segundo)

// Cria uma instância da classe uRTCLib
uRTCLib rtc(0x68);

ESP8266WebServer server(80);

int alarmCount = 0;
String alarms[4];
bool alarmTriggered[4] = {false};
bool alarmPaused = false;

void handleRoot() {
  rtc.refresh();

  String content = "<html><body>";
  content += "<h1>Hora Atual:</h1>";
  content += "<p>" + String(rtc.hour()) + ":" + String(rtc.minute()) + ":" + String(rtc.second()) + "</p>";

  content += "<h2>Data Atual:</h2>";
  content += "<p>" + String(rtc.day()) + "/" + String(rtc.month()) + "/" + String(rtc.year()).substring(2) + "</p>";

  content += "<h2>Definir Hora:</h2>";
  content += "<form method='post' action='/settime'>";
  content += "Hora: <input type='text' name='hour'><br>";
  content += "Minuto: <input type='text' name='minute'><br>";
  content += "<input type='submit' value='Definir'>";
  content += "</form>";

  content += "<h2>Definir Data:</h2>"; // Nova seção para definir a data
  content += "<form method='post' action='/setdate'>";
  content += "Dia: <input type='text' name='day'><br>";
  content += "Mês: <input type='text' name='month'><br>";
  content += "Ano: <input type='text' name='year'><br>";
  content += "<input type='submit' value='Definir'>";
  content += "</form>";

  content += "<h2>Definir Horário:</h2>";
  if (alarmCount < 4) {
    content += "<form method='post' action='/setalarm'>";
    content += "Ativação (HH:MM): <input type='text' name='alarm'><br>";
    content += "<input type='submit' value='Definir'>";
    content += "</form>";
  } else {
    content += "<p>Número máximo de horários atingidos (4).</p>";
  }

  content += "<h2>Remover Horário:</h2>";
  if (alarmCount > 0) {
    content += "<form method='post' action='/removealarm'>";
    content += "Horário para remover: <input type='text' name='removealarm'><br>";
    content += "<input type='submit' value='Remover'>";
    content += "</form>";
  } else {
    content += "<p>Nenhum horário definido.</p>";
  }

  content += "<h2>Horários:</h2>";
  for (int i = 0; i < alarmCount; i++) {
    content += "Alarme " + String(i + 1) + ": " + alarms[i] + "<br>";
  }

  content += "<h2>Status:</h2>";
  content += "<form method='post' action='/pausealarm'>";
  content += "<input type='checkbox' name='pause' value='1' ";
  if (alarmPaused) {
    content += "checked";
  }
  content += "> Pausar<br>";
  content += "<input type='submit' value='Atualizar'>";
  content += "</form>";

  content += "</body></html>";

  server.send(200, "text/html", content);
}

void handleSetTime() {
  if (server.hasArg("hour") && server.hasArg("minute")) {
    int hour = server.arg("hour").toInt();
    int minute = server.arg("minute").toInt();

    rtc.set(0, minute, hour, 0, rtc.day(), rtc.month(), rtc.year());
  }

  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handleSetDate() {
  if (server.hasArg("day") && server.hasArg("month") && server.hasArg("year")) {
    int day = server.arg("day").toInt();
    int month = server.arg("month").toInt();
    int year = server.arg("year").toInt();

    rtc.set(0, rtc.minute(), rtc.hour(), 0, day, month, year);
  }

  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handleSetAlarm() {
  if (server.hasArg("alarm")) {
    if (alarmCount < 4) {
      String alarm = server.arg("alarm");
      alarms[alarmCount] = alarm;
      alarmCount++;
      Serial.println("Horário definido: " + alarm);
    }
  }

  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handleRemoveAlarm() {
  if (server.hasArg("removealarm")) {
    int alarmToRemove = server.arg("removealarm").toInt();
    if (alarmToRemove >= 0 && alarmToRemove < alarmCount) {
      for (int i = alarmToRemove; i < alarmCount - 1; i++) {
        alarms[i] = alarms[i + 1];
      }
      alarmCount--;
    }
  }

  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handlePauseAlarm() {
  if (server.hasArg("pause")) {
    alarmPaused = server.arg("pause").toInt() == 1;
  }

  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void setup() {
  Serial.begin(9600);
  delay(3000); // Espera o console abrir


  // Conecta-se ao WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao WiFi...");
  }

  Serial.println("Conectado ao WiFi!");

  server.on("/", handleRoot);
  server.on("/settime", handleSetTime);
  server.on("/setdate", handleSetDate); // Adiciona o manipulador para definir a data
  server.on("/setalarm", handleSetAlarm);
  server.on("/removealarm", handleRemoveAlarm);
  server.on("/pausealarm", handlePauseAlarm);

  server.begin();


  URTCLIB_WIRE.begin();
}

void loop() {
  server.handleClient();

  rtc.refresh();

  if (!alarmPaused) {
    for (int i = 0; i < alarmCount; i++) {
      int alarmHour = alarms[i].substring(0, 2).toInt();
      int alarmMinute = alarms[i].substring(3, 5).toInt();

      if (rtc.hour() == alarmHour && rtc.minute() == alarmMinute) {
        Serial.println("Motor acionado: " + alarms[i]);
        alarmTriggered[i] = true;
        digitalWrite(D3, LOW); // Ativa o relé
        delay(pulseDuration); // Duração do pulso
        digitalWrite(D3, HIGH); // Desativa o relé
        delay(pulseInterval); // Intervalo do pulso
      } else if (!(rtc.hour() != alarmHour && rtc.minute() != alarmMinute)) {
        alarmTriggered[i] = false;
      }
    }
  }

  delay(1000);
}
